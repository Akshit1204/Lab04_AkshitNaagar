class FlightTable:
    def __init__(self):
        self.data = []

    def add_entry(self, pid, process, start_time, priority):
        self.data.append((pid, process, start_time, priority))

    def sort_by_pid(self):
        self.data.sort(key=lambda entry: (int(entry[0][1:]), entry[0]))

    def sort_by_start_time(self):
        self.data.sort(key=lambda entry: entry[2])

    def sort_by_priority(self):
        priority_order = {'Low': 0, 'MID': 1, 'High': 2}
        self.data.sort(key=lambda entry: priority_order[entry[3]])

    def display(self):
        print("{:<6} {:<10} {:<15} {:<8}".format("P_ID", "Process", "Start Time (ms)", "Priority"))
        print("="*40)
        for entry in self.data:
            print("{:<6} {:<10} {:<15} {:<8}".format(entry[0], entry[1], entry[2], entry[3]))

if __name__ == "__main__":
    flight_table = FlightTable()

    flight_table.add_entry("P1", "VSCode", 100, "MID")
    flight_table.add_entry("P23", "Eclipse", 234, "MID")
    flight_table.add_entry("P93", "Chrome", 189, "High")
    flight_table.add_entry("P42", "JDK", 9, "High")
    flight_table.add_entry("P9", "CMD", 7, "High")
    flight_table.add_entry("P87", "NotePad", 23, "Low")

    print("Choose sorting parameter:")
    print("1. Sort by P_ID\n2. Sort by Start Time\n3. Sort by Priority")
    choice = int(input())

    if choice == 1:
        flight_table.sort_by_pid()
    elif choice == 2:
        flight_table.sort_by_start_time()
    elif choice == 3:
        flight_table.sort_by_priority()
    else:
        print("Invalid choice!")

    print("\nSorted Flight Table:")
    flight_table.display()
